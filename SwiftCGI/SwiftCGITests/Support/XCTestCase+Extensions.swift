// Copyright 2015 Tony Allevato
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import XCTest


/// Extends `XCTestCase` with methods that
public extension XCTestCase {

  /// Asserts that the provided closure does not throw an error, generating a failure if it does
  /// throw.
  ///
  /// - Parameter body: The code to assert does not throw an error.
  public func XCTAssertNoThrow(@noescape body: () throws -> ()) {
    do {
      try body()
    } catch let e {
      XCTFail("Closure should not have thrown an error, but did throw \(e)")
    }
  }

  /// Asserts that the provided closure throws the given error, generating a failure if it does not
  /// throw or if it throws a different error.
  ///
  /// The behavior of this method is a big hack. There is no general way in Swift to express the
  /// idea "catch errors that match a particular instance of an error type" without imposing
  /// additional compile-time constraints on the possible values (for example, that they implement
  /// `Equatable` and we perform our own check). So for now, we compare the string descriptions
  /// generated by the runtime when using the types in string interpolation and consider it "close
  /// enough."
  ///
  /// - Parameter expected: The error that is expected to be thrown.
  /// - Parameter body: The code to assert throws the error.
  public func XCTAssertThrow(expected: ErrorType, @noescape body: () throws -> ()) {
    do {
      try body()
      XCTFail("Closure should have thrown \(expected), but didn't throw an error")
    } catch let actual {
      XCTAssertEqual("\(actual)", "\(expected)",
        "Closure should have thrown \(expected), but actually threw \(actual)")
    }
  }
}
